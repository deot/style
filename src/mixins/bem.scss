@use 'sass:string';
@use 'sass:meta';

/* Var
 -------------------------- */
$B: '';
$E: '';
$element-separator: '__';
$modifier-separator: '--';
$state-is-prefix: 'is-';
$state-has-prefix: 'has-';

/* Func
 -------------------------- */
@function selector-to-string($selector) {
	$selector: meta.inspect($selector);
	$selector: string.slice($selector, 2, -2);

	@return $selector;
}

@function contains-modifier($selector) {
	$selector: selector-to-string($selector);

	@if string.index($selector, $modifier-separator) {
		@return true;
	} @else {
		@return false;
	}
}

@function contain-when-flag($selector) {
	$selector: selector-to-string($selector);

	@if string.index($selector, '.' + $state-is-prefix) or string.index($selector, '.' + $state-has-prefix) {
		@return true;
	} @else {
		@return false;
	}
}

@function contain-pseudo-class($selector) {
	$selector: selector-to-string($selector);

	@if string.index($selector, ':') {
		@return true;
	} @else {
		@return false;
	}
}

@function hit-all-special-nest-rule($selector) {
	@return contains-modifier($selector) or contain-when-flag($selector) or contain-pseudo-class($selector);
}

/* Mix
 -------------------------- */

@mixin block($block) {
	$B: $block !global;

	.#{$block} {
		@content;
	}
}

/**
 * @param $root: 默认置顶
 */
@mixin element($element, $root: true) {
	$E: $element !global;
	$selector: &;
	$current-selector: "";

	// 支持数组
	@each $unit in $element {
		$current-selector: #{$current-selector + "." + $B + $element-separator + $unit + ","};
	}

	@if hit-all-special-nest-rule($selector) {
		@at-root {
			#{$selector} {
				#{$current-selector} {
					@content;
				}
			}
		}
	} @else if $root {
		@at-root {
			#{$current-selector} {
				@content;
			}
		}
	} @else {
		#{$current-selector} {
			@content;
		}
	}
}

@mixin modifier($modifier, $root: true) {
	$selector: &;

	// 支持数组
	$current-selector: "";

	@each $unit in $modifier {
		$current-selector: #{$current-selector + & + $modifier-separator + $unit + ","};
	}

	// TODO: 待验证第一个判断;
	@if hit-all-special-nest-rule($selector) {
		@at-root {
			#{$selector} {
				.#{$B + $current-selector} {
					@content;
				}
			}
		}
	} @else if $root {
		@at-root {
			#{$current-selector} {
				@content;
			}
		}
	} @else {
		#{$current-selector} {
			@content;
		}
	}
}

@mixin configurable-m($modifier, $E-flag: false) {
	$selector: &;
	$interpolation: '';

	@if $E-flag {
		$interpolation: $element-separator + $E-flag;
	}

	@at-root {
		#{$selector} {
			.#{$B + $interpolation + $modifier-separator + $modifier} {
				@content;
			}
		}
	}
}

/**
 * 1. +, >, ~, ' '
 * 2. 同element
 * 3. 同modifier
 * 4. 同block
 */
@mixin spec-selector($specSelector: '', $element: $E, $modifier: false, $block: $B) {
	$modifier-combo: '';

	@if $modifier {
		$modifier-combo: $modifier-separator + $modifier;
	}

	@at-root {
		#{&}#{$specSelector}.#{$block + $element-separator + $element + $modifier-combo} {
			@content;
		}
	}
}

@mixin meb($modifier: false, $element: $E, $block: $B) {
	$selector: &;
	$modifier-combo: '';

	@if $modifier {
		$modifier-combo: $modifier-separator + $modifier;
	}

	@at-root {
		#{$selector} {
			.#{$block + $element-separator + $element + $modifier-combo} {
				@content;
			}
		}
	}
}

/**
 * -> [className].is_require
 * 与xxx:hover类似
 */
@mixin when($state, $useHas: false) {
	$currentPrefix: $state-is-prefix;

	@if $useHas {
		$currentPrefix: $state-has-prefix;
	}

	@at-root {
		&.#{$currentPrefix + $state} {
			@content;
		}
	}
}

/**
 * 用 @at-root 来重置 & 读取次数的计数
 * 如 [clsssName] [className]:hover
 */
@mixin pseudo($pseudo) {
	@at-root #{&}#{':#{$pseudo}'} {
		@content;
	}
}

/**
 * 自定义规则
 */
@mixin extend-rule($name) {
	@extend #{'%shared-' + $name};
}

@mixin share-rule($name) {
	$rule-name: '%shared-' + $name;

	@at-root #{$rule-name} {
		@content;
	}
}
